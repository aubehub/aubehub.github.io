{"version":3,"sources":["components/HomePage.js","components/ProjectsPage.js","components/ContactPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","className","src","href","React","Component","projects","name","imgSrc","map","project","alt","ProjectsPage","ContactPage","MyLink","props","match","useRouteMatch","path","route","exact","to","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7dbefda4.chunk.js","sourcesContent":["import React from 'react';\nimport './HomePage.css';\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\n\nexport class HomePage extends React.Component{\n  render(){\n    return (\n      <div className=\"page\">\n        <img className=\"webdev-img\" src=\"./img/webdev.jpg\" />\n        <div className=\"btn-div\">        \n          <Link href=\"/projects\" className=\"btn-home\">Take a look <span> →</span></Link>\n          </div>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './ProjectsPage.css';\n\nconst projects = [\n  {name: \"BOOK EXCERPT\", href: \"book/index.html\", imgSrc:\"img/book-excerpt.jpg\"},\n  {name: \"ZORGBLAG'S BLOG\", href: \"blog-begin/blog.html\", imgSrc:\"img/zorbalas-blog.jpg\"},\n  {name: \"ALIEN ABDUCTION ORDER FORM\", href: \"4-forms/begin/forms.html\", imgSrc:\"img/abduction-form.jpg\"},\n  {name: \"CALCULATOR\", href: \"5-calculadora/begin/calculator.html\", imgSrc:\"img/calculator.jpg\"},\n  {name: \"DOGGOS\", href: \"doggos/index.html\", imgSrc:\"img/doggos.jpg\"},\n  {name: \"LUNA GALLERY\", href: \"gallery-2/index.html\", imgSrc:\"img/luna-gallery.jpg\"},\n  {name: \"FEED A STAR MOLE\", href: \"gallery-2/index.html\", imgSrc:\"img/mole-game.jpg\"},\n]\n\nprojects.map(project => {\n  return <li className=\"li-projects\"><a href={project.href}>{project.name}<img src={project.imgSrc} alt={project.name}/></a></li>\n})\n\n\nexport class ProjectsPage extends React.Component{\n  render(){\n    return (\n      <div>\n        <h1 className=\"h1-projects\">Projects</h1>\n          <section className=\"project-list\">\n            <ul className=\"ul-projects\">\n            {\n                projects.map(project => {\n                  return (\n                  <li className=\"li-projects\">\n                    <div className=\"project-titles\"><a href={project.name}>{project.name}</a></div> \n                    <div className=\"outlay\">\n                      <a href={project.href} className=\"overlay\">\n                      </a>\n                      <a href={project.href} className=\"overlay-btn\">\n                      Go to project <span className=\"arrow-right\">→</span>\n                      </a>\n                      <a href={project.href}>\n                      <img src={project.imgSrc} alt={project.name}/>\n                      </a>\n                    </div>\n                  </li>\n                  );\n                })\n            }\n            </ul>\n          </section>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './ContactPage.css';\n\nexport class ContactPage extends React.Component { \n  render() {\n    return(\n      <div className=\"logos\">\n        <ul className=\"ul-logos\">\n          <li className=\"li-logo\"><a href=\"https://aubehub.github.io/\"><img src=\"./logo-github.png\" alt=\"logo github\" /></a></li>\n          <li className=\"li-logo\"><a href=\"https://www.linkedin.com/in/alba-l%C3%B3pez-0507a11a8/\"><img src=\"./logo-in.png\" alt=\"logo linkedIn\" /></a></li>\n          <li className=\"li-logo\"><a href=\"mailto:albalopsanchez@gmail.com\"><img src=\"./logo-mail.png\" alt=\"logo linkedIn\" /></a></li>\n\t\t\t  </ul>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\nimport { HomePage } from './components/HomePage';\nimport { ProjectsPage } from './components/ProjectsPage';\nimport { ContactPage } from './components/ContactPage';\n\nconst MyLink = (props) => {\n  const match = useRouteMatch({\n    path: props.route,\n    exact: true,\n  });\n  return <Link className={ match ? \"active\" : \"\"} to={props.route}>{props.name}</Link>;\n}\n\nexport default function App() {\n\n  return (\n    <Router>\n      <div className=\"frame\">\n        <div className=\"bar\">\n          <nav>\n            <ul>\n              <li>\n                <MyLink name=\"Home\" route=\"/\" />\n              </li>\n              <li>\n                <MyLink name=\"Projects\" route=\"/projects\" />\n              </li>\n              <li>\n                <MyLink name=\"Contact\" route=\"/contact\" />\n              </li>\n            </ul>\n          </nav>\n        </div>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <div className=\"main\">\n          <Switch>\n            <Route path=\"/projects\">\n              <ProjectsPage />\n            </Route>\n            <Route path=\"/contact\">\n              <ContactPage />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n        <footer></footer>\n      </div>\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}